{
  "version": "https://jsonfeed.org/version/1",
  "title": "WorldQL",
  "home_page_url": "https://www.worldql.com/",
  "feed_url": "https://www.worldql.com/feed/feed.json",
  "description": "The spatial database for building real-time multiplayer games",
  "author": {
    "name": "WorldQL Team",
    "url": "https://www.worldql.com/about/"
  },
  "items": [{
      "id": "https://www.worldql.com/posts/2021-05-package-manager-verbs/",
      "url": "https://www.worldql.com/posts/2021-05-package-manager-verbs/",
      "title": "Developers can&#39;t seem to agree on what command should get rid of a package",
      "content_html": "<p><strong>Disclaimer</strong>: This blog post complains about something inconsequential and silly. However, it's worth talking about.</p>\n<p>Has this ever happened to you?</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> snap uninstall x<br>error: unknown <span class=\"token builtin class-name\">command</span> <span class=\"token string\">\"uninstall\"</span>, see <span class=\"token string\">'snap help'</span><span class=\"token builtin class-name\">.</span></code></pre>\n<p>Me too! I'm used to apt, so I often try to &quot;uninstall&quot; with snap when the correct verb is &quot;remove&quot;.</p>\n<p>Then I go work on a Python project and I do this:</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">$ pip remove x<br>ERROR: unknown <span class=\"token builtin class-name\">command</span> <span class=\"token string\">\"remove\"</span></code></pre>\n<p>Whoops. pip uses &quot;uninstall&quot; just like apt. Then I connect to a machine running CentOS and try to uninstall a package using yum:</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">$ yum uninstall x<br>No such command: uninstall. Please use /usr/bin/yum --help<br>It could be a YUM plugin command, try: <span class=\"token string\">\"yum install 'dnf-command(uninstall)'\"</span></code></pre>\n<p>Oh, of course. yum uses &quot;remove&quot;.</p>\n<p>The only program I know of that does it right is npm, accepting both &quot;uninstall&quot; and &quot;remove&quot;. Why doesn't every package manager do this?</p>\n<p>In case you're curious, here are some other package managers:</p>\n<table class=\"prettytable\">\n<tr>\n    <th>Package manager</th>\n    <th>Verb</th>\n</tr>\n<tr>\n    <td>Brew</td>\n    <td>uninstall</td>\n</tr>\n<tr>\n    <td>yay</td>\n    <td>-Rns ðŸ™„</td>\n</tr>\n<tr>\n    <td>vcpkg</td>\n    <td>remove</td>\n</tr>\n<tr>\n    <td>cargo</td>\n    <td>uninstall</td>\n</tr>\n<tr>\n    <td>NuGet</td>\n    <td>delete</td>\n</tr>\n<tr>\n    <td>conda</td>\n    <td>remove (it makes me irrationally angry that this is different from pip)</td>\n</tr>\n<tr>\n    <td>yarn</td>\n    <td>remove (and only remove)</td>\n</tr>\n<tr>\n    <td>flatpak</td>\n    <td>uninstall</td>\n</tr>\n<tr>\n    <td>choco</td>\n    <td>uninstall</td>\n</tr>\n</table>\n<p>If you leave a comment with any more I'll add it to the table.</p>\n<h2 id=\"comments\">Comments (62)</h2>\n<p>Discuss on <a href=\"https://www.reddit.com/r/programming/comments/nlb2c9/developers_cant_seem_to_agree_on_what_command/\">Reddit</a> / <a href=\"https://news.ycombinator.com/item?id=27287455\">Hacker News</a></p>\n",
      "date_published": "2021-05-26T00:00:00Z"
    },{
      "id": "https://www.worldql.com/posts/2021-04-java-underrated/",
      "url": "https://www.worldql.com/posts/2021-04-java-underrated/",
      "title": "Java is criminally underhyped",
      "content_html": "<p>It's likely that you read the title of this post and thought &quot;what is this guy smoking? Java is everywhere!&quot; You're correct, Java still dominates enterprise and runs some of the world's largest mission-critical applications. But Java's adoption isn't what I'm talking about, I'm talking about its <em>hype</em>. I spend a lot of time around inexperienced programmers. And what do inexperienced programmers love doing? <strong>Getting excited and opinionated about tools like programming languages</strong>. None of the CS undergrads I meet are hyped about Java but I think they should be.</p>\n<p>Young/naive developers (myself included) often fall into the trap of fetishizing new languages and tools at the expense of productivity and sanity. Prior to working at Halp (now owned by $TEAM), I had a nearly romantic relationship with backend TypeScript. I thought the node.js ecosystem was the coolest thing ever: I loved the idea of transpiled code, live debugging, the massive package library, and even the weird and fragmented build systems. When I actually used it in production and spoke to more experienced engineers the magic quickly faded away.</p>\n<p>I had a irrational affinity towards the JS ecosystem because it was the hot new thing; it had <em>hype</em>. Reality did not live up to my expectations. Today, the wonderful things I expected from JavaScript I am currently enjoying as I gain experience in Java. <strong>I feel betrayed that hype did not lead me to Java sooner.</strong> Java is fun to write, productive, and gets an unfair reputation among new developers as a dinosaur.</p>\n<h2 id=\"ergonomics-are-what-make-java-great\">Ergonomics are what make Java great <a class=\"direct-link\" href=\"#ergonomics-are-what-make-java-great\">#</a></h2>\n<p>This cannot be understated: Java simply feels good to write. A lot of this is due to the craftsmanship JetBrains puts into IntelliJ IDEA. Everything is autocompleted, jump-to-definition is fast, find-usage works well, and refactoring is easy. However, where Java truly shines is the <strong>developer experience with third-party libraries</strong>.</p>\n<h3 id=\"dependency-heavy-workloads-and-industry-trends\">Dependency heavy workloads and industry trends <a class=\"direct-link\" href=\"#dependency-heavy-workloads-and-industry-trends\">#</a></h3>\n<p>My experience is limited, but I feel the winds have shifted in favor towards liberal usage of external dependencies. <a href=\"https://en.wikipedia.org/wiki/Not_invented_here\">Not Invented Here</a> is out, <a href=\"https://en.wikipedia.org/wiki/Invented_here\">Not Invented There</a> is in. JavaScript developers in particular are extremely likely to include third-party libraries even for <a href=\"https://qz.com/646467/how-one-programmer-broke-the-internet-by-deleting-a-tiny-piece-of-code/\">trivial operations like left-padding a number</a>. I don't think the current affinity for third-party dependencies is particularly harmful, but upstream API changes can wreak havoc on untyped JS/Python code bases.</p>\n<p>When consuming third-party libraries in Java, you always know exactly what types need to be passed to a method. Most importantly, incorrect usage of a function will result in red squigglies in your editor. Given that heavy library usage is in, I think more people should be excited about Java.</p>\n<h3 id=\"nominal-typing-saves-time\">Nominal typing saves time <a class=\"direct-link\" href=\"#nominal-typing-saves-time\">#</a></h3>\n<p>There are a number of disadvantages with dynamic/duck/weak/whatever typing. When a dependency changes an API method and your application fails at runtime rather than build time that's a problem. When a developer has to refer back to the implementation of a method to figure out which types to pass it, that's a waste of time. TypeScript and Python type hints solve this problem a bit, but they lack the ability to validate passed types at runtime without extra code.</p>\n<p><em>Type guards</em> are my least favorite TypeScript feature. They're essentially duck typing that you have to implement yourself and <strong>trust</strong> that they're implemented correctly. In my opinion, this is the worst of both worlds. Consider the following:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function-variable function\">bark</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">/* The developer has to manually implement<br>a heuristic check for interface adherence!<br>When they update the interface, they have<br>to update the type guards too! */</span><br><span class=\"token keyword\">function</span> <span class=\"token function\">isDog</span><span class=\"token punctuation\">(</span>pet<span class=\"token operator\">:</span> object<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> pet <span class=\"token keyword\">is</span> Dog <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>pet <span class=\"token keyword\">as</span> Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>bark <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">const</span> dog<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token function-variable function\">bark</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'woof'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDog</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// TS now knows that objects within this if statement are always type Dog</span><br>    <span class=\"token comment\">// This is because the type guard isDog narrowed down the type to Dog</span><br>    dog<span class=\"token punctuation\">.</span><span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>There's something about declaring a type AND having to write validation logic for said type that really rubs me the wrong way. The code above <strong><a href=\"https://en.wikipedia.org/wiki/Code_smell\">smells</a> like someone using the wrong tool</strong>.</p>\n<p>Unlike TypeScript definitions, Java's nominal type systems takes load off the programmer's brain by crystallizing type definitions and guaranteeing type guards by default.</p>\n<h3 id=\"removal-of-responsibility-for-optimization\">Removal of responsibility for optimization <a class=\"direct-link\" href=\"#removal-of-responsibility-for-optimization\">#</a></h3>\n<p>Java developers can confidently trust the JVM to do what's best. Whether they're implementing a multithreaded application or storing a large amount of data on the heap, they can be confident they won't shoot themselves in the foot with memory management or data races. This advantage is primarily in comparison to C++, which contains a multitude of footguns.</p>\n<p>This is part of Java's ergonomic experience. When a developer has to worry less about technicalities they can focus more on the problem at hand.</p>\n<h3 id=\"a-holy-grail-of-productivity\">A holy grail of productivity <a class=\"direct-link\" href=\"#a-holy-grail-of-productivity\">#</a></h3>\n<p>How many languages can you think of that meet the following conditions?</p>\n<ol>\n<li>Quality package manager and build system (I ðŸ’š Maven)</li>\n<li>Nominal typing</li>\n<li>Large community</li>\n<li>Hands-off optimization</li>\n</ol>\n<p>I think the only qualifying tool is Java, but let me know if there are others!<br>\n<em><strong>edit:</strong></em> As <a href=\"https://www.reddit.com/r/programming/comments/mrrx9l/java_is_criminally_underhyped/guo7qrl/?utm_source=reddit&amp;utm_medium=web2x&amp;context=3\">Jwosty pointed out</a> Microsoft's Java competitor C# has all these characteristics and more/newer language features. I have never used C# outside of the Unity game engine, but I'm going to look into it.</p>\n<h2 id=\"surprising-absence-from-university-curriculum\">Surprising absence from university curriculum <a class=\"direct-link\" href=\"#surprising-absence-from-university-curriculum\">#</a></h2>\n<p>I currently attend the University of Colorado Boulder; it's a great school but we're certainly not known for CS. However, the majority of our upper-division computer science curriculum is shamelessly stolen from CMU or Stanford, assignments and all. During my time at CU, I've used the following programming languages:</p>\n<ol>\n<li>C++. This language was chosen for all the required core courses: <em>Computer Systems</em>, <em>Operating Systems</em>, <em>Data Structures</em>, etc. This language is a reasonable choice as it enables direct memory management, creation of kernel modules, and presents many challenges and learning opportunities.</li>\n<li>Python and Julia. As you might expect, these languages were the darlings of numerical computation and discrete math professors.</li>\n<li>Scala. This language was used in <em>Principles of Programming Languages</em> instruction, primarily for its functional programming and pattern matching features. While Scala uses the JVM and interops with Java, it has a very different developer experience than Java.</li>\n<li>Web languages (HTML/CSS/JS). These were only used in a single course called <em>Software Development Methods and Tools</em> which focused on industry trends.</li>\n</ol>\n<p>I am graduating this semester and <strong>Java has not made a single appearance</strong>; I think this is a shame.</p>\n<h2 id=\"conclusion\">Conclusion <a class=\"direct-link\" href=\"#conclusion\">#</a></h2>\n<p>There is no One True Way to build applications, but I think that Java doesn't get enough attention particularly among startups and the newbie programming community. Untyped languages are useful tools, but I don't think they should be the default choice for building large applications. If you're a full-stack dev and have never extensively used Java, I think you'll be pleasantly surprised should you try it for your next project.</p>\n<p>Java and the JVM were hyped to the moon in the 90's and early 2000's, but I don't think it should have ever died out! The developer experience I've found with IntelliJ and Java is worth getting excited about.</p>\n<p>I am curious why Java lost its hype in the first place. Programmer culture history is poorly documented and if you have insight, please <a href=\"mailto:jacksonroberts25@gmail.com\">email me</a> or leave a comment.</p>\n<h2 id=\"comments\">Comments (821)</h2>\n<p>View comments on <a href=\"https://www.reddit.com/r/programming/comments/mrrx9l/java_is_criminally_underhyped/\">reddit</a> / <a href=\"https://news.ycombinator.com/item?id=26827766\">Hacker News</a> or <a href=\"https://twitter.com/jacksondotsh\">follow me on Twitter</a></p>\n",
      "date_published": "2021-04-15T00:00:00Z"
    },{
      "id": "https://www.worldql.com/posts/2021-04-sysk-shuffler/",
      "url": "https://www.worldql.com/posts/2021-04-sysk-shuffler/",
      "title": "SYSK Random Episode Generator",
      "content_html": "<div\n    style=\"border: 1px solid black; border-radius: 10px; width: 100%; padding: 10px; text-align: center; -webkit-box-shadow: 5px 5px 20px 5px rgba(0,0,0,0.67); box-shadow: 5px 5px 20px 5px rgba(0,0,0,0.67); line-height: 30px; margin-bottom: 30px;\">\n    <div style=\"font-size: 18px; font-weight: bold;\"><span id=\"episode-name\"></span> <button\n            onclick=\"copyToClipboard()\">Copy title</button></div>\n    <div style=\"font-size: 16px; margin-top: 10px;\">\n        <div style=\"display: inline-block;\"><b>Length</b>: <span id=\"episode-length\"></span></div>\n        <div style=\"display: inline-block\"><b>Release date</b>: <span id=\"episode-release-date\"></span></div>\n    </div>\n    <div style=\"margin-top: 10px;\">\n        <button style=\"background-color: green; color: white; padding: 10px; font-size: 18px;\" onclick=\"pick()\">Pick another\n            episode</button>\n    </div>\n    <div style=\"font-size: 12px; text-align: left;\">\n        <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/List_of_Stuff_You_Should_Know_episodes\">Data sourced from\n            Wikipedia</a>\n    </div>\n</div>\n<p>Stuff You Should Know is my favorite podcast of all time. The show has an absolutely massive (1500+) back catalog of episodes. Unfortunately, neither Spotify nor Apple Podcasts has a shuffle feature for podcasts. As a result, I often find myself scrolling for a <em>reaaaaallllyy</em> long time when I'm trying to find an old episode I haven't listened to.</p>\n<p>To solve this, I made a little tool that picks a random SYSK episode so you can copy the title into your podcasts app. Hope you find it useful!</p>\n<p><a href=\"https://www.reddit.com/r/stuffyoushouldknow/comments/mq8fsu/i_love_listening_to_old_episodes_i_havent_heard/\">Leave a comment on reddit</a></p>\n<script>\nconst getJSON = async url => {\n  try {\n    const response = await fetch(url);\n    if(!response.ok) // check if response worked (no 404 errors etc...)\n      throw new Error(response.statusText);\n\n    const data = await response.json(); // get JSON from the response\n    return data; // returns a promise, which resolves to this data value\n  } catch(error) {\n    return error;\n  }\n}\n\nfunction getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min) ) + min;\n}\n\nlet episodes;\n\nconst randomEp = () => {\n  return episodes[getRndInteger(0, episodes.length - 1)];\n}\n\nlet current_random;\n\nconst pick = () => {\n  current_random = randomEp();\n  document.querySelector('#episode-name').innerHTML = current_random.title;\n  document.querySelector('#episode-length').innerHTML = current_random.length;\n  document.querySelector('#episode-release-date').innerHTML = current_random.date.split('(')[0];\n}\n\nconst copyToClipboard = () => {\n  const el = document.createElement('textarea');\n  el.value = current_random.title;\n  document.body.appendChild(el);\n  el.select();\n  document.execCommand('copy');\n  document.body.removeChild(el);\n};\n\n(async () => {\n  episodes = await getJSON('/misc/sysk_episodes.json');\n  pick();\n})();\n\n</script>\n",
      "date_published": "2021-04-13T00:00:00Z"
    },{
      "id": "https://www.worldql.com/posts/2021-04-ffmpeg-for-web/",
      "url": "https://www.worldql.com/posts/2021-04-ffmpeg-for-web/",
      "title": "The correct configuration options to compress videos for the web with ffmpeg",
      "content_html": "<p>The motivation of this post is to document the command-line options that worked for me to reduce the size of .mp4 files prior to publishing them on the web. Here they are!</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ffmpeg -i input.mp4 -vcodec h264 -acodec aac -strict -2 -crf <span class=\"token number\">30</span> out.mp4</code></pre>\n<p>This output of this command is compatible with all modern browsers (Chrome, Firefox, Safari) and even works in IE11! The <code>-crf 30</code> flag tells ffmpeg to compress the output as much as possible, you can reduce the number for higher quality.</p>\n",
      "date_published": "2021-04-11T00:00:00Z"
    },{
      "id": "https://www.worldql.com/posts/2021-02-11ty-setup/",
      "url": "https://www.worldql.com/posts/2021-02-11ty-setup/",
      "title": "Get rolling with 11ty and GitHub Pages in 5 minutes!",
      "content_html": "<p>There are an abundance of static site generators available to users; choosing between them can seem overwhelming. Over my internet-inhabiting life, I've used Jekyll (remember <a href=\"http://octopress.org/\">Octopress</a>?), Pelican, and a variety of less popular projects. Today, I believe <strong><a href=\"https://www.11ty.dev/\">eleventy</a></strong> is the best choice you can make for a greenfield static site project.</p>\n<h2 id=\"why-choose-11ty-in-2021%3F\">Why choose 11ty in 2021? <a class=\"direct-link\" href=\"#why-choose-11ty-in-2021%3F\">#</a></h2>\n<p>There are a few reasons why 11ty is the best choice for a blog in 2021:</p>\n<ul>\n<li>It's built for node.js. Most developers already have node and npm installed, so it's likely you won't have to install anything new to use it. A particular advantage is that you won't have to install Ruby (required for Jekyll) just to build your website.</li>\n<li>It uses the extremely mature <a href=\"https://mozilla.github.io/nunjucks/\">Nunjucks</a> templating engine. If you've ever used jinja2 or the Django templating language, you'll feel right at home.</li>\n<li>The official eleventy starter projects are easy to customize and ruthlessly focused on performance.</li>\n</ul>\n<div class=\"captionedimg\">\n<p><img src=\"/img/lh.png\" alt=\"lighthouse scores\"><br>\nWow! Look at those Lighthouse scores!</p>\n</div>\n<h2 id=\"getting-started\">Getting started <a class=\"direct-link\" href=\"#getting-started\">#</a></h2>\n<p>Start a stopwatch. This will actually only take 5 minutes.</p>\n<h3 id=\"step-1.-make-sure-you-have-node.js-and-npm-installed.\">Step 1. Make sure you have node.js and npm installed. <a class=\"direct-link\" href=\"#step-1.-make-sure-you-have-node.js-and-npm-installed.\">#</a></h3>\n<p>You probably already have these. If not, instructions on installing them can be found <a href=\"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\">here</a>.</p>\n<h3 id=\"step-2.-clone-an-11ty-starter-project-to-your-local-machine-and-install-the-dependencies.\">Step 2. Clone an <a href=\"https://www.11ty.dev/docs/starter/\">11ty starter project</a> to your local machine and install the dependencies. <a class=\"direct-link\" href=\"#step-2.-clone-an-11ty-starter-project-to-your-local-machine-and-install-the-dependencies.\">#</a></h3>\n<p>I'm going to be using the <code>eleventy-base-blog</code> starter, but you can use whichever strikes your fancy.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/11ty/eleventy-base-blog myblog<br><span class=\"token builtin class-name\">cd</span> myblog<br><span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre>\n<h3 id=\"step-3.-build-your-site!\">Step 3. Build your site! <a class=\"direct-link\" href=\"#step-3.-build-your-site!\">#</a></h3>\n<pre class=\"language-bash\"><code class=\"language-bash\">npx eleventy --serve</code></pre>\n<p>You should see a successful build output and a link to view your site at <a href=\"http://localhost:8080\">http://localhost:8080</a>.</p>\n<h3 id=\"step-4.-configure-your-site-to-work-with-github-pages\">Step 4. Configure your site to work with GitHub Pages <a class=\"direct-link\" href=\"#step-4.-configure-your-site-to-work-with-github-pages\">#</a></h3>\n<p>We're going to forgo setting up a GitHub Action to automatically build your site on GitHub's servers. Since you'll be building your site locally during development anyways, it makes sense to simply push the built HTML. GitHub Pages only supports serving from the root of a branch or a subdirectory named <code>docs</code>, so we're going to tell eleventy to build there instead of <code>_site</code>.</p>\n<p>First, make a directory for your build output</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> docs</code></pre>\n<p>Next, open your <code>.eleventy.js</code> configuration file and change the output directory from <code>_site</code> to <code>docs</code>:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"highlight-line\">dir<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">      input<span class=\"token operator\">:</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">      includes<span class=\"token operator\">:</span> <span class=\"token string\">\"_includes\"</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">      data<span class=\"token operator\">:</span> <span class=\"token string\">\"_data\"</span><span class=\"token punctuation\">,</span></span><br><mark class=\"highlight-line highlight-line-active\">      output<span class=\"token operator\">:</span> <span class=\"token string\">\"docs\"</span></mark><br><span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span></code></pre>\n<p>Finally, change the 404 path in the same file to reflect your new output folder as well:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"highlight-line\">eleventyConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setBrowserSyncConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">  callbacks<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">    <span class=\"token function-variable function\">ready</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> browserSync</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><br><mark class=\"highlight-line highlight-line-active\">      <span class=\"token keyword\">const</span> content_404 <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'docs/404.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></mark><br><span class=\"highlight-line\"></span><br><span class=\"highlight-line\">      browserSync<span class=\"token punctuation\">.</span><span class=\"token function\">addMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">        <span class=\"token comment\">// Provides the 404 content without redirect.</span></span><br><span class=\"highlight-line\">        res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>content_404<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">        res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">  ui<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">  ghostMode<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre>\n<p>Now you're ready to publish to GitHub!</p>\n<h3 id=\"step-5.-push-to-github-and-enable-your-site!\">Step 5. Push to GitHub and enable your site! <a class=\"direct-link\" href=\"#step-5.-push-to-github-and-enable-your-site!\">#</a></h3>\n<p>Create a new GitHub repository, update your cloned repository to point to it, and push the contents of your site!</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote remove origin<br><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin <span class=\"token operator\">&lt;</span>your-newly-created-git-repo-url<span class=\"token operator\">></span><br><span class=\"token function\">git</span> push --set-upstream origin master</code></pre>\n<p>You should see your files appear in your repository on GitHub. Now, all that's left is to publish it! Click the <em>Settings</em> tab on your repository, and scroll down to the <em>GitHub Pages</em> section. Under <em>Source</em>, select the <code>master</code> branch and choose the <code>docs</code> folder as the project root:</p>\n<div class=\"captionedimg\">\n<p><img src=\"/img/githubpagessettings.png\" alt=\"GitHub pages settings\"><br>\nYour settings should look like this.</p>\n</div>\n<p>Hit &quot;Save&quot; and GitHub will publish your site. <strong>Congratulations, you've now got an eleventy blog running on GitHub Pages!</strong></p>\n<p>I hope that this tutorial was helpful, enjoy 11ty!</p>\n",
      "date_published": "2021-02-03T00:00:00Z"
    }
  ]
}
